/**
 * @author Maz
 */

/**
 * @id Number_toRadians
 * @memberOf Number
 * @return {Number} The degrees converted to radians.
 */

/**
 * @id Number_toDegrees
 * @memberOf Number
 * @return {Number} The radians converted to degrees.
 */

/**
 * @id ob_load
 * @param {String} pkg The package to be loaded.
 */

/**
 * @id ob_moduleUrl
 * @param {String} pkg The package to load the file from.
 * @param {String} file The name of the file to be appended to the end of the path.
 * @return {String} The url of the requested file
 */

/**
 * @id ob_setObject
 * Sets a value to a path. This creates objects as it goes along.
 * @param {String} path A dot delimeted location for the value to be stored.
 * @param {any} value The value to be put at path.
 */

/**
 * @id ob_createCanvas
 * @param {OBSize} size The size to make the canvas
 * @return {Array} An array in the format of [HTMLCanvasElement, CanvasRendering2DContext] the context is modified to have extra methods.
 */

/**
 * @id OBAttr
 * @classDescription OBAttr is not really a class but an abstract Object containng the default implementation of the attr method
 */

/**
 * @id OBAttr_attr
 * @param {String} name The name of the property to use.
 * @param {any} value? If present, this sets the property <name> to <value> otherwise, this acts as a getter.
 * @return {any} If this was used as a setter, this will return undefined; otherwise it will return the value of the requested property.
 */

/**
 * @id OBPoint
 * @classDescription The geometric class defining a point (x,y)
 * @constructor
 * @param {Number} x The x-coorinate of the point
 * @param {Number} y The y-coorinate of the point
 * @return {OBPoint} The newly initialized OBPoint object\
 */